#!/bin/bash

#lfs-me: Linux From Scratch made ( more ) easy. A simple fakeroot based
#package manager for LFS, heavily inspired by Archlinux.
#Copyright (C) 2014  Max Bruckner
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 3 as published by
#the Free Software Foundation.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

#color codes
color_red='\e[0;31m'      #Red
color_green='\e[0;32m'    #Green
color_yellow='\e[0;33m'   #Yellow
color_blue='\e[0;34m'     #Blue
color_bred='\e[1;31m'     #Bold red
color_bgreen='\e[1;32m'   #Bold green
color_byellow='\e[1;33m'  #Bold yellow
color_bblue='\e[1;34m'    #Bold blue
color_reset='\e[0m'       #Reset color

#functions
lfs_me_disable_color() {
    color_red=''
    color_green=''
    color_yellow=''
    color_blue=''
    color_bred=''
    color_bgreen=''
    color_byellow=''
    color_bblue=''
    color_reset=''
}

lfs_me_help() {
    echo -e "${color_blue}LFS-ME ( Linux From Scratch made [more] easy ), a simple fakeroot based package manager for Linux from Scratch.\n"

    echo -e "${color_bblue}Usage:"
    echo -e "${color_blue}${0} ${color_bblue}mode [Options]${color_reset}\n"

    echo -e "${color_bblue}Modes:"
    echo -e "${color_bblue} build        ${color_blue}PKGBUILD-file            Build the package specified by PKGBUILD-file"
    echo -e "${color_bblue} install      ${color_blue}package.pkg              Install a package to system and index"
    echo -e "${color_bblue} remove       ${color_blue}package.pkg              Remove a package from system and index"
    echo -e "${color_bblue} remove       ${color_blue}pkgname pkgver           Remove a package from system and index"
    echo -e "${color_bblue} remove       ${color_blue}pkgname                  Remove a package from system and index"
    echo -e "${color_bblue} indexadd     ${color_blue}package.pkg              Add a package to the index"
    echo -e "${color_bblue} indexremove  ${color_blue}package.pkg              Remove a package from the index"
    echo -e "${color_bblue} indexremove  ${color_blue}pkgname pkgver           Remove a package from the index"
    echo -e "${color_bblue} indexremove  ${color_blue}pkgname                  Remove a package from the index"
	echo -e "${color_bblue} indexlist    ${color_blue}                         List all package in the index"
	echo -e "${color_bblue} indexlist    ${color_blue}searchterm               Search for packages in the index"
	echo -e "${color_bblue} list         ${color_blue}package.pkg              List all files of a package"
	echo -e "${color_bblue} list         ${color_blue}pkgname                  List all files of a package"
	echo -e "${color_bblue} list         ${color_blue}pkgname pkgver           List all files of a package"
    echo -e "${color_bblue} check        ${color_blue}package.pkg              Verify checksums of files installed by package"
    echo -e "${color_bblue} check        ${color_blue}pkgname pkgver           Verify checksums of files installed by package"
    echo -e "${color_bblue} check        ${color_blue}pkgname                  Verify checksums of files installed by package"
    echo -e "${color_bblue} checksums    ${color_blue}PKGBUILD-file            Create SHA1 sums for all source files"
    echo -e "${color_bblue} download     ${color_blue}PKGBUILD-file            Download source files"
    echo -e "${color_bblue} owner        ${color_blue}file                     List all packages that own a file.\n"

    echo -e "${color_bblue}Options:"
    echo -e "${color_bblue} -b | --build-dir         ${color_blue}Specify the build directory"
    echo -e "${color_bblue} -D | --debug             ${color_blue}Enable debug mode"
    echo -e "${color_bblue} -f | --fakeroot-dir      ${color_blue}Specify the fakeroot directory"
    echo -e "${color_bblue} -h | --help              ${color_blue}Show this help"
    echo -e "${color_bblue} -i | --index-dir         ${color_blue}Specify index directory"
    echo -e "${color_bblue}    | --no-checks         ${color_blue}Don't run checks"
    echo -e "${color_bblue}    | --no-color          ${color_blue}Disable color output"
    echo -e "${color_bblue}    | --no-downloads      ${color_blue}Don't download sources"
    echo -e "${color_bblue}    | --ignore-checksums  ${color_blue}Don't verify checksums"
    echo -e "${color_bblue} -p | --prefix            ${color_blue}Set install prefix"
    echo -e "${color_bblue} -s | --sources           ${color_blue}Set directory with source tarballs"
    echo -e "${color_reset}"
}

lfs_me_sources() {
    if $download_sources
    then
        #Download missing files
        if [ ! -z ${sources+x} ]
        then
            for file in ${sources[@]}
            do
                # Does the file exist?
                if [ ! -f "${sources_dir}/$(basename "$file")" ]
                then
                    if echo $file | grep -qE '(https?|ftp)://.*'    #URL?
                    then
                        if ! wget "$file" -O "${sources_dir}/$(basename "$file")"
                        then
                            rm "${sources_dir}/$(basename "$file")"
                            lfs_me_error "Download of '$file' failed!"
                        fi
                    else
                        lfs_me_error "The source file '${sources_dir}/$file' doesn't exist!"
                    fi
                fi
            done
        else
            echo -e "${color_bred}Please provide a 'sources' array in the PKGBUILD file.${color_reset}"
        fi
    fi

    if $verify_checksums
    then
        #Verify all the checksums
        if [[ ! -z ${sha1sums+x} ]]
        then
            sources_size=${#sources[@]}
            if [ $sources_size != ${#sha1sums[@]} ]
            then
                lfs_me_error "The number of source files and SHA1 sums differ."
            fi
           
            #Now actually verify the checksums
            for i in `seq 0 $(($sources_size - 1))`
            do
				filename=$(basename "${sources[$i]}")
                sum=$(sha1sum "${sources_dir}/${filename}" | grep -o -E '^[0-9a-f]{40}')
                if [[ $sum == "${sha1sums[$i]}" ]]
                then
                    echo "${filename} OK"
                else
                    lfs_me_error "The SHA1 sum for '${filename}' doesn't match."
                fi
            done
        else
            echo -e "${color_bred}Please provide a 'sha1sums' array in the PKGBUILD file.${color_reset}"
        fi
    fi
}

#Creates SHA1 checksums for each file in 'sources'
lfs_me_checksums() {
    echo "sha1sums=("
    for file in ${sources[@]}
    do
		sha1sum "${sources_dir}/$(basename $file)" | grep -o -E '^[0-9a-f]{40}'
    done
    echo ")"
}

lfs_me_pause() {
    read -n1 -r -p "Press any key to continue..."
}

lfs_me_error() {
    echo -e "${color_bred}ERROR: ${1}${color_reset}" >&2
    lfs_me_help
    lfs_me_cleanup
    exit 1
}

lfs_me_message() {
    echo -e "${color_bgreen}${1}${color_reset}"
}

lfs_me_cleanup() {
    #clean up tempfiles
    if $debug; then lfs_me_pause; fi
    rm -rf "$temp_dir"
}

lfs_me_package() {
    #create metadata
    cd "$fakeroot_dir"
    find . -type f | grep -ve '^\./FILES$' > "${fakeroot_dir}/FILES"
    find . -type l > "${fakeroot_dir}/LINKS"
    find . -type d > "${fakeroot_dir}/DIRS"
    find . -type f -exec sha1sum {} \; | grep -ve "\\./sha1sums$" > "${fakeroot_dir}/sha1sums"
    #remove "." from the beginning of pathnames
    sed -i -e "s/^\\.//" "${fakeroot_dir}/FILES"
    sed -i -e "s/^\\.//" "${fakeroot_dir}/DIRS"
    sed -i -e "s/^\\.//" "${fakeroot_dir}/LINKS"

    #create package
    cd "$current_dir"
    cp "${temp_dir}/PKGBUILD" "${fakeroot_dir}/"
    fakeroot tar -cJf "${pkgname}-${pkgver}.pkg" -C "$fakeroot_dir" .

    #clean build directories
    [ "$build_dir" ] && [ "$fakeroot_dir" ] && rm -rf "${build_dir}/*" "${fakeroot_dir}/*"
}

lfs_me_indexadd() {
    lfs_me_message "Adding to package index"
    if $debug; then lfs_me_pause; fi
    index_entry="${index_dir}/${pkgname}/${pkgver}"
    mkdir -p "$index_entry"
    cp "$temp_dir"/{PKGBUILD,sha1sums,FILES,DIRS,LINKS} "$index_entry"
}

lfs_me_indexremove() {
    lfs_me_message "Removing from package index"
    if $debug; then lfs_me_pause; fi
    #get name of directory
    index_entry="${index_dir}/${pkgname}/${pkgver}"

    #Remove files/dirs from index
    rm "$index_entry"/{PKGBUILD,sha1sums,FILES,DIRS,LINKS}
    rmdir "$index_entry"
    rmdir --ignore-fail-on-non-empty "${index_dir}/${pkgname}"
}

#extract and load a package file, returns the number of arguments to shift
#for some reason shift suddenly stopped working if not done like that
lfs_me_load_package_files() {
	command_name="$1"
    if [[ -z $2 ]]
    then
        lfs_me_error "Please specify a package for '${command_name}'"
    fi

    #extract meta files
    if tar -xJf "$2" -C "$temp_dir" ./sha1sums ./FILES ./DIRS ./LINKS ./PKGBUILD 2> /dev/null
    then
        package_file=$2
        shift_value=1
    else
        pkgname="$2"
        pkgver="$3"

		if [ -z $pkgver ] || [ "${pkgver:0:1}" == "-" ]
		then
			case "$(find "${index_dir}/${pkgname}" -type d | grep -v -E "^${index_dir}/${pkgname}\$" | wc -l)" in
				0)
					lfs_me_error "Can't find package '${pkgname}'"
					;;
				1)
					index_entry="$(find "${index_dir}/${pkgname}" -type d | grep -v -E "^${index_dir}/${pkgname}\$")"
					pkgver=$(basename "${index_entry}")
					;;
				*)
					lfs_me_error "Package '${pkgname}' is ambiguos"
					;;
			esac
			shift_value=1
		else
			index_entry="${index_dir}/${pkgname}/${pkgver}"
			shift_value=2
		fi

        if ! [ -d "$index_entry" ]
        then
            lfs_me_error "Could not load package files!"
        fi

        cp "$index_entry"/{sha1sums,FILES,DIRS,LINKS,PKGBUILD} "$temp_dir"
    fi
    pkgbuild_file="${temp_dir}/PKGBUILD"
    source "$pkgbuild_file"
    return "$shift_value"
}

#Get a list of every installed package
lfs_me_get_installed_packages() {
	[ -f "${temp_dir}/ALL_PACKAGES" ] && rm "${temp_dir}/ALL_PACKAGES"
	touch "${temp_dir}/ALL_PACKAGES"

	for package in $( ls "${index_dir}")
	do
		for version in $( ls "${index_dir}/${package}")
		do
			echo -e "${package}/${version}" >> "${temp_dir}/ALL_PACKAGES"
		done
	done
}

#Get a list of every installed file
lfs_me_get_installed_files() {
	#if $1 is false, the current package ( pkgname, pkgver ) is not included in the file list
	list_current_package=$1

	[ -f "${temp_dir}/ALL_FILES" ] && rm "${temp_dir}/ALL_FILES"
	touch "${temp_dir}/ALL_FILES"

	lfs_me_get_installed_packages
	for package in $( cat "${temp_dir}/ALL_PACKAGES" )
	do
		if $list_current_package || [ "${pkgname}/${pkgver}" != "$package" ]
		then
			cat "${index_dir}/${package}/"{FILES,DIRS,LINKS} >> "${temp_dir}/ALL_FILES"
		fi
	done
	unset list_current_package
}

#--------------------------------------------------------------------------------
#Those functions are supposed to be overloaded by the PKGBUILD
lfs_me_prepare() {
	tar -xf "${sources_dir}/${pkgname}-${pkgver}.tar.gz" -C "$build_dir"

	cd "${build_dir}/${pkgname}-${pkgver}"

	./configure --prefix=/usr
}

lfs_me_build() {
	make
}

lfs_me_check() {
	make check 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-check.log"
}

lfs_me_install() {
	make DESTDIR="${fakeroot_dir}" install
}

lfs_me_preinstall() {
	return
}

lfs_me_postinstall() {
	return
}

lfs_me_preremove() {
	return
}

lfs_me_postremove() {
	return
}
#--------------------------------------------------------------------------------

#initialize variables
debug=false
temp_dir="$(mktemp -d)"
build_dir="${temp_dir}/build"
fakeroot_dir="${temp_dir}/fakeroot"
index_dir="/var/lfs-me/index"
current_dir=$( pwd )
run_checks=true
download_sources=true
verify_checksums=true
show_color=true
install_prefix=""
sources_dir="$current_dir"
mode="undefined"
show_help=false

#load configuration file
[ -f ~/.lfs-me ] && source ~/.lfs-me

if ! $show_color
then
    lfs_me_disable_color
fi

#Parse all options
for (( i=1; i<=$#; i++ ))
do
    case "${!i}" in
        -b | --build-dir)
			((i++))
            build_dir="${!i}"
			[ -d "$build_dir" ] || lfs_me_error "Build directory '${build_dir}' not found!"
            ;;
        -D | --debug)
            debug=true
            ;;
        -f | --fakeroot-dir)
			((i++))
            fakeroot_dir="${!i}"
			[ -d "$fakeroot_dir" ] || lfs_me_error "Fakeroot directory '${fakeroot_dir}' not found!"
            ;;
        -h | --help)
			show_help=true
            ;;
        -i | --index-dir)
            ((i++))
            index_dir="${!i}"
			[ -d "$index_dir" ] || lfs_me_error "Package index '${index_dir}' not found!"
            ;;
        --no-checks)
            run_checks=false
            ;;
        --no-color)
            lfs_me_disable_color
            ;;
        --no-downloads)
            download_sources=false
            ;;
        --ignore-checksums)
            verify_checksums=false
            ;;
        -p | --prefix)
            ((i++))
            install_prefix="${!i}"
			[ -d "$install_prefix" ] || lfs_me_error "Install prefix '${install_prefix}' not found!"
            ;;
        -s | --sources)
            ((i++))
            sources_dir="${!i}"
			[ -d "$sources_dir" ] || lfs_me_error "Sources dir '${sources_dir}' not found!"
            ;;
        -*)
            lfs_me_error "Unknown option '${!i}'"
            ;;
    esac
done
unset i

#show help
if $show_help
then
	lfs_me_help
	lfs_me_cleanup
	exit 0
fi

#Create all the necessary directories
index_dir="${install_prefix}/${index_dir}"
mkdir -p "$install_prefix" "$build_dir" "$fakeroot_dir" "$sources_dir" "$index_dir" 2> /dev/null

#Get absolute paths for directories ( so cd'ing to them works from everywhere )
install_prefix=$(readlink -f "$install_prefix")
build_dir=$(readlink -f "$build_dir")
fakeroot_dir=$(readlink -f "$fakeroot_dir")
sources_dir=$(readlink -f "$sources_dir")
index_dir=$(readlink -f "$index_dir")

#Parse Arguments
while :
do
    case "$1" in
        build)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            mode="build"
            pkgbuild_file="$2"
			[ -f "$pkgbuild_file" ] || lfs_me_error "PKGBUILD file '${pkgbuild_file}' not found!"
            shift 2
            ;;
        download)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            mode="download"
            pkgbuild_file="$2"
			[ -f "$pkgbuild_file" ] || lfs_me_error "PKGBUILD file '${pkgbuild_file}' not found!"
            shift 2
            ;;
        indexadd)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            lfs_me_load_package_files "$@"
            shift "$shift_value"
            mode="indexadd"
            ;;
        indexremove)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            lfs_me_load_package_files "$@"
            shift "$shift_value"
            mode="indexremove"
            ;;
        indexlist)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            indexlist_search=""
            case $2 in
                -*)
                    ;;
                *)
                    indexlist_search="$2"
                    shift
                    ;;
            esac

            mode="indexlist"
            shift
            ;;
		list)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
			lfs_me_load_package_files "$@"
			shift "$shift_value"
			mode=list
			;;
        install)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            lfs_me_load_package_files "$@"
            shift "$shift_value"
            mode="install"
            ;;
        remove)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            lfs_me_load_package_files "$@"
            shift "$shift_value"
            mode="remove"
            ;;
        check)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            lfs_me_load_package_files "$@"
            shift "$shift_value"
            mode="check"
            ;;
        checksums)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
            mode="checksums"
            pkgbuild_file="$2"
			[ -f "$pkgbuild_file" ] || lfs_me_error "PKGBUILD file '${pkgbuild_file}' not found!"
            shift 2
            ;;
		owner)
			[ "$mode" != "undefined" ] && lfs_me_error "Only one action can be performed!"
			filename=$(readlink -f "$2")
			mode=owner
			shift 2
			;;
        *)
            break
            ;;
    esac
done


case "$mode" in
	build)
        cp "$pkgbuild_file" "${temp_dir}/PKGBUILD"
        source "${temp_dir}/PKGBUILD"
        
        lfs_me_message "Getting sources"
        lfs_me_sources

	    lfs_me_message "Preparing source"
		if $debug; then lfs_me_pause; fi
		lfs_me_prepare
        
	    lfs_me_message "Building"
        if $debug
        then 
            lfs_me_pause
            lfs_me_build 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-build.log"
        else
            lfs_me_build
        fi
       
        if $run_checks
        then
            lfs_me_message "Running checks"
            if $debug; then lfs_me_pause; fi
            lfs_me_check
        fi
        
	    lfs_me_message "Installing to fakeroot"
        if $debug
        then 
            lfs_me_pause
            lfs_me_install 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-install.log"
        else
            lfs_me_install
        fi
        
	    lfs_me_message "Packaging"
        if $debug; then lfs_me_pause; fi
        lfs_me_package
        ;;

	download)
        cp "$pkgbuild_file" "${temp_dir}/PKGBUILD"
        source "${temp_dir}/PKGBUILD"

        lfs_me_message "Getting sources"
        lfs_me_sources
        ;;

	indexadd)
        lfs_me_indexadd
        ;;

	indexremove)
        lfs_me_indexremove
        ;;

	indexlist)
		lfs_me_get_installed_packages
		cat "${temp_dir}/ALL_PACKAGES" | sed 's!/! !g' | grep -i "$indexlist_search"
        ;;

	list)
		cat "$temp_dir"/{FILES,DIRS,LINKS} | grep -v '^$'
		;;

	install)
        #check and load package file
		[ -z $package_file ] && lfs_me_error "You have to specify a package file."

		lfs_me_message "Running preinstall"
		if $debug
		then
			lfs_me_pause
			lfs_me_preinstall 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-preinstall.log"
		else
			lfs_me_preinstall
		fi
		cd "$current_dir"

        #extract files
        lfs_me_message "Extracting package"
        if $debug; then lfs_me_pause; fi
        mkdir -pv "${fakeroot_dir}/${install_prefix}"
        tar -xJf "$package_file" -C "${fakeroot_dir}/${install_prefix}" --exclude ./PKGBUILD --exclude ./sha1sums --exclude ./FILES --exclude ./DIRS --exclude ./LINKS

        #install files with rsync
        lfs_me_message "Installing files"
        if $debug
        then 
            lfs_me_pause
            rsync -rlpgoDK "${fakeroot_dir}/" / 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-install.log"
        else
            rsync -rlpgoDK "${fakeroot_dir}/" /
        fi

        #postinstall script
	    lfs_me_message "Running postinstall"
        cd "$temp_dir"
        if $debug
        then 
            lfs_me_pause
            lfs_me_postinstall 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-postinstall.log"
        else
            lfs_me_postinstall
        fi

        #add to index
        lfs_me_indexadd
        ;;

	remove)
        lfs_me_message "Getting list of installed files"
        if $debug; then lfs_me_pause; fi
        lfs_me_get_installed_files false    #false: don't include files from the current package

		lfs_me_message "Running preremove"
		if $debug
		then
			lfs_me_pause
			lfs_me_preremove 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-preremove.log"
		else
			lfs_me_preremove
		fi

        #deleting files
        lfs_me_message "Deleting"
        if $debug; then lfs_me_pause; fi
	    cd "$temp_dir"
        for file in $( cat FILES )
        do
			if grep -q "^${file}$" "${temp_dir}/ALL_FILES"
			then
				echo "Didn't remove file '${install_prefix}/${file}', still needed."
			else
				rm -f "${install_prefix}/${file}"
			fi
        done
        for directory in $( sort -r DIRS )  #Sort in order to remove subdirs first
        do
			if grep -q "^${directory}$" "${temp_dir}/ALL_FILES"
			then
				echo "Didn't remove directory '${install_prefix}/${directory}', still needed."
			else
				rmdir --ignore-fail-on-non-empty "${install_prefix}/${directory}"
			fi
        done
        for link in $( cat LINKS )
        do
			#only remove broken symlinks
			if test -r "${install_prefix}/${link}"
			then
				echo "Didn't remove link '${install_prefix}/${link}', still needed."
			else
				rm -f "${install_prefix}/${link}"
			fi
        done

        #postremove script
        lfs_me_message "Running postremove"
        if $debug
        then 
            lfs_me_pause
            lfs_me_postremove 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-postremove.log"
        else
            lfs_me_postremove
        fi

        #remove from index
        lfs_me_indexremove
        ;;
	check)
        lfs_me_message "Preparing sha1sums"
        if $debug; then lfs_me_pause; fi

	    cd "$temp_dir"
	    grep -ve "[a-z0-9]\{40\}\\s*\\.\\/\(FILES$\|LINKS$\|DIRS$\)" sha1sums > sha1sums.grep
	    mv sha1sums.grep sha1sums

        #verify checksums
        lfs_me_message "Verifying checksums"
        cd "${install_prefix}/"
        if $debug
        then 
            lfs_me_pause
            sha1sum -c "$temp_dir/sha1sums" 2>&1 | tee "${current_dir}/${pkgname}-${pkgver}-checksums.log"
        else
            sha1sum -c "$temp_dir/sha1sums"
        fi
        ;;
	checksums)
        cp "$pkgbuild_file" "${temp_dir}/PKGBUILD"
        source "${temp_dir}/PKGBUILD"

        lfs_me_message "Creating SHA1 checksums"
        lfs_me_checksums
        ;;
	owner)
		lfs_me_get_installed_packages
		for package in $(cat "${temp_dir}/ALL_PACKAGES")
		do
			for file in $(cat "${index_dir}/${package}/"{FILES,DIRS,LINKS})
			do
				[ $(readlink -f "$file") == "$filename" ] && echo "${package/\//-}"
			done
		done
		;;
    *)
        lfs_me_error "No action specified!"
        ;;
esac

lfs_me_cleanup
